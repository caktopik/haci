<?php
defined('BASEPATH') OR exit('No direct script access allowed');

define ('HACI_VERSION', '1.0.0');

class MY_Controller extends CI_Controller
{
    // $default_homepage = TRUE; // direct to admin
    protected $hccore;
    // public $hclib = $this->load->library('hacilib');
    private $_title_admin_name = 'Haci App';
    private $data = array();

    public function __construct()
    {
        parent::__construct();
        $hccore =& get_instance();
        $this->load->library('hacilib');
    }

    public function _set_tes($value)
    {
        $this->_title_admin_name = $value;
    }

    public function _get_tes()
    {
        return $this->_title_admin_name;
    }

    public function get_class()
    {
        $c = $hccore->router->class();
        return $c;
    }

    public function get_method()
    {
        $m = $hccore->router->method();
        return $m;
    }

    public function get_directory()
    {
        $d = $hccore->router->directory();
        return $d;
    }

    public function get_approute()
    {
        // $this->load->library('hacilib');
        $controllers = $this->hacilib->list_controller();
        return $controllers;
    }

    public function get_route($i)
    {
        $name_uri = $this->uri->uri_string($this->uri->segment($i));
        return $name_uri;
    }

    public function get_name_controller()
    {
        $approute = $this->get_approute();
        $result = array_column($approute, 'controller');
        return $result;
    }
    
    public function get_slug_controller()
    {
        $approute = $this->get_approute();
        $result = array_column($approute, 'slug');
        return $result;
    }

    public function get_type_controller()
    {
        $approute = $this->get_approute();
        $result = array_column($approute, 'type');
        return $result;
    }

    public function correct_route() // must correcting detail flow uri
    {
        $type_controller = $this->get_type_controller();
        $name_controller = $this->get_name_controller();
        $slug_controller = $this->get_slug_controller();
        $get_route = $this->get_route(1);

        // i think the condition for $get_route must change to array boolean
        if($get_route !='admin' && $get_route !='frontpage' && in_array('admin',$type_controller) && in_array($get_route,$name_controller))
        {
            $i = array_search('admin', $type_controller);
            $j = array_search($get_route, $name_controller);
            redirect($type_controller[$i].'/'.$name_controller[$j]);
            // and view controller
        }
        elseif($get_route !='admin' && $get_route !='frontpage' && in_array('frontpage', $type_controller) && in_array($get_route, $name_controller))
        {
            redirect($type_controller.'/'.$name_controller);
        }

    }

    public function _render_view_admin($content, $data)
    {
        $this->load->view('admin/adminlte/admin_header', $data);
        $this->load->view('admin/adminlte/admin_sidebar', $data);
        $this->load->view($content, $data);
        $this->load->view('admin/adminlte/admin_footer', $data);
    }

    public function _render_view_site()
    {
        
    }

    // require_once(APPPATH.'controllers/'.$RTR->directory.$class.'.php');

	// 	if ( ! class_exists($class, FALSE) OR $method[0] === '_' OR method_exists('CI_Controller', $method))
	// 	{
	// 		$e404 = TRUE;
	// 	}
	// 	elseif (method_exists($class, '_remap'))
	// 	{
	// 		$params = array($method, array_slice($URI->rsegments, 2));
	// 		$method = '_remap';
	// 	}
	// 	elseif ( ! method_exists($class, $method))
	// 	{
	// 		$e404 = TRUE;
	// 	}
}

require_once(APPPATH.'core/Admin_Controller.php');
require_once(APPPATH.'core/Public_Controller.php');